FROM openjdk:11-stretch

LABEL maintainer="Martijn Koster \"mak-docker@greenhills.co.uk\""
LABEL repository="https://github.com/docker-solr/docker-solr"

# Override the solr download location with e.g.:
#   docker build -t mine --build-arg SOLR_DOWNLOAD_SERVER=http://www-eu.apache.org/dist/lucene/solr .
ARG SOLR_DOWNLOAD_SERVER

# DKDK below is for Debian so use CentOS 7 one
RUN set -e; \
  apt-get update; \
  apt-get -y install acl dirmngr gpg lsof procps wget; \
  rm -rf /var/lib/apt/lists/*

# DKDK below is my guess - yum probably need sudo so...?
# RUN set -e; \
#   yum update; \
#   yum -y install acl dirmngr gpg lsof procps wget; \
# #   rm -rf /var/lib/yum/history/*


# # DKDK below is for installing Oracle Java but let's use openjdk here
# # there is no ready made jdk centos image, so we install java ourselves
# ENV JAVA_HOME="/etc/alternatives/jre" \
#     JAVA_VERSION="1.8.0"

# # # /dev/urandom is used as random source, which is prefectly safe
# # # according to http://www.2uo.de/myths-about-urandom/
# RUN yum install -y \
#        java-${JAVA_VERSION}-openjdk  \
#        java-${JAVA_VERSION}-openjdk-devel \
#     && echo "securerandom.source=file:/dev/urandom" >> /usr/lib/jvm/java/jre/lib/security/java.security


ENV SOLR_USER="solr" \
    # DKDK change port number to 8080
    SOLR_UID="8080" \
    SOLR_GROUP="solr" \
    # DKDK change port number to 8080
    SOLR_GID="8080" \
    # DKDK add SOLR_PORT
    SOLR_PORT="8080" \
    SOLR_VERSION="8.2.0" \
    SOLR_URL="${SOLR_DOWNLOAD_SERVER:-https://archive.apache.org/dist/lucene/solr}/8.2.0/solr-8.2.0.tgz" \
    SOLR_SHA256="bfa4b39b236e5d714f4233138b8b5cb7e1996ddc0aad60052ce83c4b7bf33449" \
    SOLR_KEYS="E58A6F4D5B2B48AC66D5E53BD4F181881A42F9E6" \
    PATH="/opt/solr/bin:/opt/docker-solr/scripts:$PATH" \
    SOLR_INCLUDE=/etc/default/solr.in.sh \
    SOLR_HOME=/var/solr/data \
    SOLR_PID_DIR=/var/solr \
    SOLR_LOGS_DIR=/var/solr/logs \
    LOG4J_PROPS=/var/solr/log4j2.xml

ENV GOSU_VERSION 1.11
ENV GOSU_KEY B42F6819007F00F88E364FD4036A9C25BF357DD4

ENV TINI_VERSION v0.18.0
ENV TINI_KEY 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7

RUN set -x; \
  groupadd -r --gid "$SOLR_GID" "$SOLR_GROUP"; \
  useradd -r --uid "$SOLR_UID" --gid "$SOLR_GID" "$SOLR_USER"

RUN set -e; \
  export GNUPGHOME="/tmp/gnupg_home"; \
  mkdir -p "$GNUPGHOME"; \
  chmod 700 "$GNUPGHOME"; \
  echo "disable-ipv6" >> "$GNUPGHOME/dirmngr.conf"; \
  for key in $SOLR_KEYS $GOSU_KEY $TINI_KEY; do \
    found=''; \
    for server in \
# DKDK for leela, below may work instead
      # hkp://p80.pool.sks-keyservers.net:80 \
#     ha.pool.sks-keyservers.net \ \
      hkp://keyserver.ubuntu.com:80 \
      hkp://p80.pool.sks-keyservers.net:80 \
      pgp.mit.edu \
    ; do \
      echo "  trying $server for $key"; \
      gpg --batch --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$key" && found=yes && break; \
      gpg --batch --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$key" && found=yes && break; \
    done; \
    test -z "$found" && echo >&2 "error: failed to fetch $key from several disparate servers -- network issues?" && exit 1; \
  done; \
  exit 0

RUN set -e; \
  export GNUPGHOME="/tmp/gnupg_home"; \
  pkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$pkgArch"; \
  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$pkgArch.asc"; \
  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
  rm /usr/local/bin/gosu.asc; \
  chmod +x /usr/local/bin/gosu; \
  gosu nobody true; \
  wget -O /usr/local/bin/tini "https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-$pkgArch"; \
  wget -O /usr/local/bin/tini.asc "https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-$pkgArch.asc"; \
  gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini; \
  rm /usr/local/bin/tini.asc; \
  chmod +x /usr/local/bin/tini; \
  tini --version; \
  echo "downloading $SOLR_URL"; \
  wget -nv "$SOLR_URL" -O "/opt/solr-$SOLR_VERSION.tgz"; \
  echo "downloading $SOLR_URL.asc"; \
  wget -nv "$SOLR_URL.asc" -O "/opt/solr-$SOLR_VERSION.tgz.asc"; \
  echo "$SOLR_SHA256 */opt/solr-$SOLR_VERSION.tgz" | sha256sum -c -; \
  (>&2 ls -l "/opt/solr-$SOLR_VERSION.tgz" "/opt/solr-$SOLR_VERSION.tgz.asc"); \
  gpg --batch --verify "/opt/solr-$SOLR_VERSION.tgz.asc" "/opt/solr-$SOLR_VERSION.tgz"; \
  tar -C /opt --extract --file "/opt/solr-$SOLR_VERSION.tgz"; \
  (cd /opt; ln -s "solr-$SOLR_VERSION" solr); \
  rm "/opt/solr-$SOLR_VERSION.tgz"*; \
  rm -Rf /opt/solr/docs/; \
  mkdir -p /opt/solr/server/solr/lib /docker-entrypoint-initdb.d /opt/docker-solr; \
  chown -R 0:0 "/opt/solr-$SOLR_VERSION"; \
  find "/opt/solr-$SOLR_VERSION" -type d -print0 | xargs -0 chmod 0755; \
  find "/opt/solr-$SOLR_VERSION" -type f -print0 | xargs -0 chmod 0644; \
  chmod -R 0755 "/opt/solr-$SOLR_VERSION/bin" "/opt/solr-$SOLR_VERSION/contrib/prometheus-exporter/bin/solr-exporter" /opt/solr-$SOLR_VERSION/server/scripts/cloud-scripts; \
  # DKDK comment below five related to solr.in.sh
  # cp /opt/solr/bin/solr.in.sh /etc/default/solr.in.sh; \
  # mv /opt/solr/bin/solr.in.sh /opt/solr/bin/solr.in.sh.orig; \
  # mv /opt/solr/bin/solr.in.cmd /opt/solr/bin/solr.in.cmd.orig; \
  # chown root:0 /etc/default/solr.in.sh; \
  # chmod 0664 /etc/default/solr.in.sh; \
  mkdir -p /var/solr/data /var/solr/logs; \
  (cd /opt/solr/server/solr; cp solr.xml zoo.cfg /var/solr/data/); \
  cp /opt/solr/server/resources/log4j2.xml /var/solr/log4j2.xml; \
  find /var/solr -type d -print0 | xargs -0 chmod 0770; \
  find /var/solr -type f -print0 | xargs -0 chmod 0660; \
  sed -i -e "s/\"\$(whoami)\" == \"root\"/\$(id -u) == 0/" /opt/solr/bin/solr; \
  sed -i -e 's/lsof -PniTCP:/lsof -t -PniTCP:/' /opt/solr/bin/solr; \
  # DKDK change chown
  # chown -R "0:0" /opt/solr-$SOLR_VERSION /docker-entrypoint-initdb.d /opt/docker-solr; \
  # chown -R "$SOLR_USER:0" /var/solr; \
  chown -R "$SOLR_USER:$SOLR_GROUP" /opt/solr-$SOLR_VERSION /docker-entrypoint-initdb.d /opt/docker-solr; \
  chown -R "$SOLR_USER:$SOLR_GROUP" /var/solr /var/solr/data; \
    { command -v gpgconf; gpgconf --kill all || :; }; \
  rm -r "$GNUPGHOME"

# DKDK change chown command
COPY scripts /opt/docker-solr/scripts
# DKDK copy config files to docker container - need to locate leela_solr_conf at the directory where this dockerfile is
COPY leela_solr_conf /opt/docker-solr/leela_solr_conf
# DKDK change ownership
RUN chown -R $SOLR_USER:$SOLR_GROUP /opt/docker-solr

# DKDK make copies for files like solr.in.sh and confs (locating this below USER did not work...)
RUN set -e; \
  cp /opt/docker-solr/leela_solr_conf/solr.in.sh /etc/default/solr.in.sh; \
  mv /opt/solr/bin/solr.in.sh /opt/solr/bin/solr.in.sh.orig; \
  mv /opt/solr/bin/solr.in.cmd /opt/solr/bin/solr.in.cmd.orig; \
  chown root:0 /etc/default/solr.in.sh; \
  chmod 0664 /etc/default/solr.in.sh;

# # DKDK making cores? test one with collection1
# RUN set -e; \
# #  /opt/docker-solr/scripts/precreate-core collection1 gettingstarted;
#   # mkdir -p ${SOLR_HOME}/collection1;
#   # mkdir -p /opt/docker-solr/collection1;
#   # cp -p -r /opt/docker-solr/leela_solr_conf/collection1/* ${SOLR_HOME}/collection1; \
#   /opt/docker-solr/scripts/precreate-core collection1 ${SOLR_HOME}/collection1/conf;

# DKDK below volume may not be needed
# VOLUME /var/solr
# DKDK change EXPOSE to 8080
EXPOSE ${SOLR_PORT}
WORKDIR /opt/solr
USER $SOLR_USER

ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["solr-foreground"]
# CMD ["solr-precreate","collection1","/var/solr/data/collection1/conf"]
# CMD ["solr-foreground_dk1"]
